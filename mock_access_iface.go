// Code generated by MockGen. DO NOT EDIT.
// Source: ../access_iface.go
//
// Generated by this command:
//
//	mockgen -package access -source ../access_iface.go -destination ../mock_access_iface.go
//

// Package access is a generated GoMock package.
package access

import (
	context "context"
	reflect "reflect"

	validator "github.com/go-playground/validator/v10"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockManager) AddRole(ctx context.Context, domain Domain, role Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, domain, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockManagerMockRecorder) AddRole(ctx, domain, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockManager)(nil).AddRole), ctx, domain, role)
}

// AddRolePermissions mocks base method.
func (m *MockManager) AddRolePermissions(ctx context.Context, permissions []Permission, role Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePermissions", ctx, permissions, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRolePermissions indicates an expected call of AddRolePermissions.
func (mr *MockManagerMockRecorder) AddRolePermissions(ctx, permissions, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePermissions", reflect.TypeOf((*MockManager)(nil).AddRolePermissions), ctx, permissions, role, domain)
}

// AddRoleUsers mocks base method.
func (m *MockManager) AddRoleUsers(ctx context.Context, users []User, role Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleUsers", ctx, users, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoleUsers indicates an expected call of AddRoleUsers.
func (mr *MockManagerMockRecorder) AddRoleUsers(ctx, users, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleUsers", reflect.TypeOf((*MockManager)(nil).AddRoleUsers), ctx, users, role, domain)
}

// AddUserRoles mocks base method.
func (m *MockManager) AddUserRoles(ctx context.Context, user User, roles []Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRoles", ctx, user, roles, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserRoles indicates an expected call of AddUserRoles.
func (mr *MockManagerMockRecorder) AddUserRoles(ctx, user, roles, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRoles", reflect.TypeOf((*MockManager)(nil).AddUserRoles), ctx, user, roles, domain)
}

// DeleteAllRolePermissions mocks base method.
func (m *MockManager) DeleteAllRolePermissions(ctx context.Context, role Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRolePermissions", ctx, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllRolePermissions indicates an expected call of DeleteAllRolePermissions.
func (mr *MockManagerMockRecorder) DeleteAllRolePermissions(ctx, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRolePermissions", reflect.TypeOf((*MockManager)(nil).DeleteAllRolePermissions), ctx, role, domain)
}

// DeleteRole mocks base method.
func (m *MockManager) DeleteRole(ctx context.Context, role Role, domain Domain) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, role, domain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockManagerMockRecorder) DeleteRole(ctx, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockManager)(nil).DeleteRole), ctx, role, domain)
}

// DeleteRolePermissions mocks base method.
func (m *MockManager) DeleteRolePermissions(ctx context.Context, permissions []Permission, role Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermissions", ctx, permissions, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRolePermissions indicates an expected call of DeleteRolePermissions.
func (mr *MockManagerMockRecorder) DeleteRolePermissions(ctx, permissions, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermissions", reflect.TypeOf((*MockManager)(nil).DeleteRolePermissions), ctx, permissions, role, domain)
}

// DeleteRoleUsers mocks base method.
func (m *MockManager) DeleteRoleUsers(ctx context.Context, users []User, role Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleUsers", ctx, users, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleUsers indicates an expected call of DeleteRoleUsers.
func (mr *MockManagerMockRecorder) DeleteRoleUsers(ctx, users, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleUsers", reflect.TypeOf((*MockManager)(nil).DeleteRoleUsers), ctx, users, role, domain)
}

// DeleteUserRole mocks base method.
func (m *MockManager) DeleteUserRole(ctx context.Context, username User, role Role, domain Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRole", ctx, username, role, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRole indicates an expected call of DeleteUserRole.
func (mr *MockManagerMockRecorder) DeleteUserRole(ctx, username, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRole", reflect.TypeOf((*MockManager)(nil).DeleteUserRole), ctx, username, role, domain)
}

// DomainExists mocks base method.
func (m *MockManager) DomainExists(ctx context.Context, domain Domain) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainExists", ctx, domain)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainExists indicates an expected call of DomainExists.
func (mr *MockManagerMockRecorder) DomainExists(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainExists", reflect.TypeOf((*MockManager)(nil).DomainExists), ctx, domain)
}

// Domains mocks base method.
func (m *MockManager) Domains(ctx context.Context) ([]Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domains", ctx)
	ret0, _ := ret[0].([]Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Domains indicates an expected call of Domains.
func (mr *MockManagerMockRecorder) Domains(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domains", reflect.TypeOf((*MockManager)(nil).Domains), ctx)
}

// Handlers mocks base method.
func (m *MockManager) Handlers(validate *validator.Validate, handler LogHandler) Handlers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handlers", validate, handler)
	ret0, _ := ret[0].(Handlers)
	return ret0
}

// Handlers indicates an expected call of Handlers.
func (mr *MockManagerMockRecorder) Handlers(validate, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handlers", reflect.TypeOf((*MockManager)(nil).Handlers), validate, handler)
}

// RequireAll mocks base method.
func (m *MockManager) RequireAll(ctx context.Context, user User, domain Domain, permissions ...Permission) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, user, domain}
	for _, a := range permissions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequireAll", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequireAll indicates an expected call of RequireAll.
func (mr *MockManagerMockRecorder) RequireAll(ctx, user, domain any, permissions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, user, domain}, permissions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAll", reflect.TypeOf((*MockManager)(nil).RequireAll), varargs...)
}

// RoleExists mocks base method.
func (m *MockManager) RoleExists(ctx context.Context, role Role, domain Domain) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleExists", ctx, role, domain)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RoleExists indicates an expected call of RoleExists.
func (mr *MockManagerMockRecorder) RoleExists(ctx, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleExists", reflect.TypeOf((*MockManager)(nil).RoleExists), ctx, role, domain)
}

// RolePermissions mocks base method.
func (m *MockManager) RolePermissions(ctx context.Context, role Role, domain Domain) ([]Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePermissions", ctx, role, domain)
	ret0, _ := ret[0].([]Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RolePermissions indicates an expected call of RolePermissions.
func (mr *MockManagerMockRecorder) RolePermissions(ctx, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePermissions", reflect.TypeOf((*MockManager)(nil).RolePermissions), ctx, role, domain)
}

// RoleUsers mocks base method.
func (m *MockManager) RoleUsers(ctx context.Context, role Role, domain Domain) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUsers", ctx, role, domain)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleUsers indicates an expected call of RoleUsers.
func (mr *MockManagerMockRecorder) RoleUsers(ctx, role, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUsers", reflect.TypeOf((*MockManager)(nil).RoleUsers), ctx, role, domain)
}

// Roles mocks base method.
func (m *MockManager) Roles(ctx context.Context, domain Domain) ([]Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles", ctx, domain)
	ret0, _ := ret[0].([]Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roles indicates an expected call of Roles.
func (mr *MockManagerMockRecorder) Roles(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockManager)(nil).Roles), ctx, domain)
}

// User mocks base method.
func (m *MockManager) User(ctx context.Context, username User, domain ...Domain) (*UserAccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range domain {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "User", varargs...)
	ret0, _ := ret[0].(*UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockManagerMockRecorder) User(ctx, username any, domain ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, domain...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockManager)(nil).User), varargs...)
}

// UserPermissions mocks base method.
func (m *MockManager) UserPermissions(ctx context.Context, username User, domain ...Domain) (map[Domain][]Permission, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range domain {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserPermissions", varargs...)
	ret0, _ := ret[0].(map[Domain][]Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPermissions indicates an expected call of UserPermissions.
func (mr *MockManagerMockRecorder) UserPermissions(ctx, username any, domain ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, domain...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPermissions", reflect.TypeOf((*MockManager)(nil).UserPermissions), varargs...)
}

// UserRoles mocks base method.
func (m *MockManager) UserRoles(ctx context.Context, username User, domain ...Domain) (map[Domain][]Role, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, username}
	for _, a := range domain {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserRoles", varargs...)
	ret0, _ := ret[0].(map[Domain][]Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRoles indicates an expected call of UserRoles.
func (mr *MockManagerMockRecorder) UserRoles(ctx, username any, domain ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, username}, domain...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoles", reflect.TypeOf((*MockManager)(nil).UserRoles), varargs...)
}

// Users mocks base method.
func (m *MockManager) Users(ctx context.Context, domain ...Domain) ([]*UserAccess, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range domain {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Users", varargs...)
	ret0, _ := ret[0].([]*UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockManagerMockRecorder) Users(ctx any, domain ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, domain...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockManager)(nil).Users), varargs...)
}

// MockDomains is a mock of Domains interface.
type MockDomains struct {
	ctrl     *gomock.Controller
	recorder *MockDomainsMockRecorder
}

// MockDomainsMockRecorder is the mock recorder for MockDomains.
type MockDomainsMockRecorder struct {
	mock *MockDomains
}

// NewMockDomains creates a new mock instance.
func NewMockDomains(ctrl *gomock.Controller) *MockDomains {
	mock := &MockDomains{ctrl: ctrl}
	mock.recorder = &MockDomainsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomains) EXPECT() *MockDomainsMockRecorder {
	return m.recorder
}

// DomainExists mocks base method.
func (m *MockDomains) DomainExists(ctx context.Context, guarantorID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainExists", ctx, guarantorID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainExists indicates an expected call of DomainExists.
func (mr *MockDomainsMockRecorder) DomainExists(ctx, guarantorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainExists", reflect.TypeOf((*MockDomains)(nil).DomainExists), ctx, guarantorID)
}

// DomainIDs mocks base method.
func (m *MockDomains) DomainIDs(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainIDs", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainIDs indicates an expected call of DomainIDs.
func (mr *MockDomainsMockRecorder) DomainIDs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainIDs", reflect.TypeOf((*MockDomains)(nil).DomainIDs), ctx)
}
