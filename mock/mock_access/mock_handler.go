// Code generated by MockGen. DO NOT EDIT.
// Source: ../handler.go
//
// Generated by this command:
//
//	mockgen -source ../handler.go -destination mock_access/mock_handler.go
//

// Package mock_access is a generated GoMock package.
package mock_access

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockHandlers) AddRole() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockHandlersMockRecorder) AddRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockHandlers)(nil).AddRole))
}

// AddRolePermissions mocks base method.
func (m *MockHandlers) AddRolePermissions() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePermissions")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// AddRolePermissions indicates an expected call of AddRolePermissions.
func (mr *MockHandlersMockRecorder) AddRolePermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePermissions", reflect.TypeOf((*MockHandlers)(nil).AddRolePermissions))
}

// AddRoleUsers mocks base method.
func (m *MockHandlers) AddRoleUsers() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleUsers")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// AddRoleUsers indicates an expected call of AddRoleUsers.
func (mr *MockHandlersMockRecorder) AddRoleUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleUsers", reflect.TypeOf((*MockHandlers)(nil).AddRoleUsers))
}

// DeleteRole mocks base method.
func (m *MockHandlers) DeleteRole() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockHandlersMockRecorder) DeleteRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockHandlers)(nil).DeleteRole))
}

// DeleteRolePermissions mocks base method.
func (m *MockHandlers) DeleteRolePermissions() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermissions")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// DeleteRolePermissions indicates an expected call of DeleteRolePermissions.
func (mr *MockHandlersMockRecorder) DeleteRolePermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermissions", reflect.TypeOf((*MockHandlers)(nil).DeleteRolePermissions))
}

// DeleteRoleUsers mocks base method.
func (m *MockHandlers) DeleteRoleUsers() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleUsers")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// DeleteRoleUsers indicates an expected call of DeleteRoleUsers.
func (mr *MockHandlersMockRecorder) DeleteRoleUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleUsers", reflect.TypeOf((*MockHandlers)(nil).DeleteRoleUsers))
}

// RolePermissions mocks base method.
func (m *MockHandlers) RolePermissions() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePermissions")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// RolePermissions indicates an expected call of RolePermissions.
func (mr *MockHandlersMockRecorder) RolePermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePermissions", reflect.TypeOf((*MockHandlers)(nil).RolePermissions))
}

// RoleUsers mocks base method.
func (m *MockHandlers) RoleUsers() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleUsers")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// RoleUsers indicates an expected call of RoleUsers.
func (mr *MockHandlersMockRecorder) RoleUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleUsers", reflect.TypeOf((*MockHandlers)(nil).RoleUsers))
}

// Roles mocks base method.
func (m *MockHandlers) Roles() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockHandlersMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockHandlers)(nil).Roles))
}

// User mocks base method.
func (m *MockHandlers) User() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockHandlersMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockHandlers)(nil).User))
}

// Users mocks base method.
func (m *MockHandlers) Users() http.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockHandlersMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockHandlers)(nil).Users))
}
